<?xml version="1.0" encoding="UTF-8"?>
<module name="ietf-hardware"
        xmlns="urn:ietf:params:xml:ns:yang:yin:1"
        xmlns:hw="urn:ietf:params:xml:ns:yang:ietf-hardware"
        xmlns:inet="urn:ietf:params:xml:ns:yang:ietf-inet-types"
        xmlns:yang="urn:ietf:params:xml:ns:yang:ietf-yang-types"
        xmlns:ianahw="urn:ietf:params:xml:ns:yang:iana-hardware">
  <yang-version value="1.1"/>
  <namespace uri="urn:ietf:params:xml:ns:yang:ietf-hardware"/>
  <prefix value="hw"/>
  <import module="ietf-inet-types">
    <prefix value="inet"/>
  </import>
  <import module="ietf-yang-types">
    <prefix value="yang"/>
  </import>
  <import module="iana-hardware">
    <prefix value="ianahw"/>
  </import>
  <organization>
    <text>IETF NETMOD (Network Modeling) Working Group</text>
  </organization>
  <contact>
    <text>WG Web:   &lt;https://datatracker.ietf.org/wg/netmod/&gt;
WG List:  &lt;mailto:netmod@ietf.org&gt;
Editor:   Andy Bierman
          &lt;mailto:andy@yumaworks.com&gt;
Editor:   Martin Bjorklund
          &lt;mailto:mbj@tail-f.com&gt;
Editor:   Jie Dong
          &lt;mailto:jie.dong@huawei.com&gt;
Editor:   Dan Romascanu
          &lt;mailto:dromasca@gmail.com&gt;</text>
  </contact>
  <description>
    <text>This module contains a collection of YANG definitions for
managing hardware.
This data model is designed for the Network Management Datastore
Architecture (NMDA) defined in RFC 8342.
Copyright (c) 2018 IETF Trust and the persons identified as
authors of the code.  All rights reserved.
Redistribution and use in source and binary forms, with or
without modification, is permitted pursuant to, and subject
to the license terms contained in, the Simplified BSD License
set forth in Section 4.c of the IETF Trust's Legal Provisions
Relating to IETF Documents
(https://trustee.ietf.org/license-info).
This version of this YANG module is part of RFC 8348; see
the RFC itself for full legal notices.</text>
  </description>
  <revision date="2018-03-13">
    <description>
      <text>Initial revision.</text>
    </description>
    <reference>
      <text>RFC 8348: A YANG Data Model for Hardware Management</text>
    </reference>
  </revision>
  <feature name="entity-mib">
    <description>
      <text>This feature indicates that the device implements
the ENTITY-MIB.</text>
    </description>
    <reference>
      <text>RFC 6933: Entity MIB (Version 4)</text>
    </reference>
  </feature>
  <feature name="hardware-state">
    <description>
      <text>Indicates that ENTITY-STATE-MIB objects are supported</text>
    </description>
    <reference>
      <text>RFC 4268: Entity State MIB</text>
    </reference>
  </feature>
  <feature name="hardware-sensor">
    <description>
      <text>Indicates that ENTITY-SENSOR-MIB objects are supported</text>
    </description>
    <reference>
      <text>RFC 3433: Entity Sensor Management Information Base</text>
    </reference>
  </feature>
  <typedef name="admin-state">
    <type name="enumeration">
      <enum name="unknown">
        <value value="1"/>
        <description>
          <text>The resource is unable to report administrative state.</text>
        </description>
      </enum>
      <enum name="locked">
        <value value="2"/>
        <description>
          <text>The resource is administratively prohibited from use.</text>
        </description>
      </enum>
      <enum name="shutting-down">
        <value value="3"/>
        <description>
          <text>The resource usage is administratively limited to current
instances of use.</text>
        </description>
      </enum>
      <enum name="unlocked">
        <value value="4"/>
        <description>
          <text>The resource is not administratively prohibited from
use.</text>
        </description>
      </enum>
    </type>
    <description>
      <text>Represents the various possible administrative states.</text>
    </description>
    <reference>
      <text>RFC 4268: Entity State MIB - EntityAdminState</text>
    </reference>
  </typedef>
  <typedef name="oper-state">
    <type name="enumeration">
      <enum name="unknown">
        <value value="1"/>
        <description>
          <text>The resource is unable to report its operational state.</text>
        </description>
      </enum>
      <enum name="disabled">
        <value value="2"/>
        <description>
          <text>The resource is totally inoperable.</text>
        </description>
      </enum>
      <enum name="enabled">
        <value value="3"/>
        <description>
          <text>The resource is partially or fully operable.</text>
        </description>
      </enum>
      <enum name="testing">
        <value value="4"/>
        <description>
          <text>The resource is currently being tested and cannot
therefore report whether or not it is operational.</text>
        </description>
      </enum>
    </type>
    <description>
      <text>Represents the possible values of operational states.</text>
    </description>
    <reference>
      <text>RFC 4268: Entity State MIB - EntityOperState</text>
    </reference>
  </typedef>
  <typedef name="usage-state">
    <type name="enumeration">
      <enum name="unknown">
        <value value="1"/>
        <description>
          <text>The resource is unable to report usage state.</text>
        </description>
      </enum>
      <enum name="idle">
        <value value="2"/>
        <description>
          <text>The resource is servicing no users.</text>
        </description>
      </enum>
      <enum name="active">
        <value value="3"/>
        <description>
          <text>The resource is currently in use, and it has sufficient
spare capacity to provide for additional users.</text>
        </description>
      </enum>
      <enum name="busy">
        <value value="4"/>
        <description>
          <text>The resource is currently in use, but it currently has no
spare capacity to provide for additional users.</text>
        </description>
      </enum>
    </type>
    <description>
      <text>Represents the possible values of usage states.</text>
    </description>
    <reference>
      <text>RFC 4268: Entity State MIB -  EntityUsageState</text>
    </reference>
  </typedef>
  <typedef name="alarm-state">
    <type name="bits">
      <bit name="unknown">
        <position value="0"/>
        <description>
          <text>The resource is unable to report alarm state.</text>
        </description>
      </bit>
      <bit name="under-repair">
        <position value="1"/>
        <description>
          <text>The resource is currently being repaired, which, depending
on the implementation, may make the other values in this
bit string not meaningful.</text>
        </description>
      </bit>
      <bit name="critical">
        <position value="2"/>
        <description>
          <text>One or more critical alarms are active against the
resource.</text>
        </description>
      </bit>
      <bit name="major">
        <position value="3"/>
        <description>
          <text>One or more major alarms are active against the
resource.</text>
        </description>
      </bit>
      <bit name="minor">
        <position value="4"/>
        <description>
          <text>One or more minor alarms are active against the
resource.</text>
        </description>
      </bit>
      <bit name="warning">
        <position value="5"/>
        <description>
          <text>One or more warning alarms are active against the
resource.</text>
        </description>
      </bit>
      <bit name="indeterminate">
        <position value="6"/>
        <description>
          <text>One or more alarms of whose perceived severity cannot be
determined are active against this resource.</text>
        </description>
      </bit>
    </type>
    <description>
      <text>Represents the possible values of alarm states.  An alarm is a
persistent indication of an error or warning condition.
When no bits of this attribute are set, then no active alarms
are known against this component and it is not under repair.</text>
    </description>
    <reference>
      <text>RFC 4268: Entity State MIB - EntityAlarmStatus</text>
    </reference>
  </typedef>
  <typedef name="standby-state">
    <type name="enumeration">
      <enum name="unknown">
        <value value="1"/>
        <description>
          <text>The resource is unable to report standby state.</text>
        </description>
      </enum>
      <enum name="hot-standby">
        <value value="2"/>
        <description>
          <text>The resource is not providing service, but it will be
immediately able to take over the role of the resource to
be backed up, without the need for initialization
activity, and will contain the same information as the
resource to be backed up.</text>
        </description>
      </enum>
      <enum name="cold-standby">
        <value value="3"/>
        <description>
          <text>The resource is to back up another resource, but it will
not be immediately able to take over the role of a
resource to be backed up and will require some
initialization activity.</text>
        </description>
      </enum>
      <enum name="providing-service">
        <value value="4"/>
        <description>
          <text>The resource is providing service.</text>
        </description>
      </enum>
    </type>
    <description>
      <text>Represents the possible values of standby states.</text>
    </description>
    <reference>
      <text>RFC 4268: Entity State MIB - EntityStandbyStatus</text>
    </reference>
  </typedef>
  <typedef name="sensor-value-type">
    <type name="enumeration">
      <enum name="other">
        <value value="1"/>
        <description>
          <text>A measure other than those listed below.</text>
        </description>
      </enum>
      <enum name="unknown">
        <value value="2"/>
        <description>
          <text>An unknown measurement or arbitrary, relative numbers</text>
        </description>
      </enum>
      <enum name="volts-AC">
        <value value="3"/>
        <description>
          <text>A measure of electric potential (alternating current).</text>
        </description>
      </enum>
      <enum name="volts-DC">
        <value value="4"/>
        <description>
          <text>A measure of electric potential (direct current).</text>
        </description>
      </enum>
      <enum name="amperes">
        <value value="5"/>
        <description>
          <text>A measure of electric current.</text>
        </description>
      </enum>
      <enum name="watts">
        <value value="6"/>
        <description>
          <text>A measure of power.</text>
        </description>
      </enum>
      <enum name="hertz">
        <value value="7"/>
        <description>
          <text>A measure of frequency.</text>
        </description>
      </enum>
      <enum name="celsius">
        <value value="8"/>
        <description>
          <text>A measure of temperature.</text>
        </description>
      </enum>
      <enum name="percent-RH">
        <value value="9"/>
        <description>
          <text>A measure of percent relative humidity.</text>
        </description>
      </enum>
      <enum name="rpm">
        <value value="10"/>
        <description>
          <text>A measure of shaft revolutions per minute.</text>
        </description>
      </enum>
      <enum name="cmm">
        <value value="11"/>
        <description>
          <text>A measure of cubic meters per minute (airflow).</text>
        </description>
      </enum>
      <enum name="truth-value">
        <value value="12"/>
        <description>
          <text>Value is one of 1 (true) or 2 (false)</text>
        </description>
      </enum>
    </type>
    <description>
      <text>A node using this data type represents the sensor measurement
data type associated with a physical sensor value.  The actual
data units are determined by examining a node of this type
together with the associated sensor-value-scale node.
A node of this type SHOULD be defined together with nodes of
type sensor-value-scale and type sensor-value-precision.
These three types are used to identify the semantics of a node
of type sensor-value.</text>
    </description>
    <reference>
      <text>RFC 3433: Entity Sensor Management Information Base -
          EntitySensorDataType</text>
    </reference>
  </typedef>
  <typedef name="sensor-value-scale">
    <type name="enumeration">
      <enum name="yocto">
        <value value="1"/>
        <description>
          <text>Data scaling factor of 10^-24.</text>
        </description>
      </enum>
      <enum name="zepto">
        <value value="2"/>
        <description>
          <text>Data scaling factor of 10^-21.</text>
        </description>
      </enum>
      <enum name="atto">
        <value value="3"/>
        <description>
          <text>Data scaling factor of 10^-18.</text>
        </description>
      </enum>
      <enum name="femto">
        <value value="4"/>
        <description>
          <text>Data scaling factor of 10^-15.</text>
        </description>
      </enum>
      <enum name="pico">
        <value value="5"/>
        <description>
          <text>Data scaling factor of 10^-12.</text>
        </description>
      </enum>
      <enum name="nano">
        <value value="6"/>
        <description>
          <text>Data scaling factor of 10^-9.</text>
        </description>
      </enum>
      <enum name="micro">
        <value value="7"/>
        <description>
          <text>Data scaling factor of 10^-6.</text>
        </description>
      </enum>
      <enum name="milli">
        <value value="8"/>
        <description>
          <text>Data scaling factor of 10^-3.</text>
        </description>
      </enum>
      <enum name="units">
        <value value="9"/>
        <description>
          <text>Data scaling factor of 10^0.</text>
        </description>
      </enum>
      <enum name="kilo">
        <value value="10"/>
        <description>
          <text>Data scaling factor of 10^3.</text>
        </description>
      </enum>
      <enum name="mega">
        <value value="11"/>
        <description>
          <text>Data scaling factor of 10^6.</text>
        </description>
      </enum>
      <enum name="giga">
        <value value="12"/>
        <description>
          <text>Data scaling factor of 10^9.</text>
        </description>
      </enum>
      <enum name="tera">
        <value value="13"/>
        <description>
          <text>Data scaling factor of 10^12.</text>
        </description>
      </enum>
      <enum name="peta">
        <value value="14"/>
        <description>
          <text>Data scaling factor of 10^15.</text>
        </description>
      </enum>
      <enum name="exa">
        <value value="15"/>
        <description>
          <text>Data scaling factor of 10^18.</text>
        </description>
      </enum>
      <enum name="zetta">
        <value value="16"/>
        <description>
          <text>Data scaling factor of 10^21.</text>
        </description>
      </enum>
      <enum name="yotta">
        <value value="17"/>
        <description>
          <text>Data scaling factor of 10^24.</text>
        </description>
      </enum>
    </type>
    <description>
      <text>A node using this data type represents a data scaling factor,
represented with an International System of Units (SI) prefix.
The actual data units are determined by examining a node of
this type together with the associated sensor-value-type.
A node of this type SHOULD be defined together with nodes of
type sensor-value-type and type sensor-value-precision.
Together, associated nodes of these three types are used to
identify the semantics of a node of type sensor-value.</text>
    </description>
    <reference>
      <text>RFC 3433: Entity Sensor Management Information Base -
          EntitySensorDataScale</text>
    </reference>
  </typedef>
  <typedef name="sensor-value-precision">
    <type name="int8">
      <range value="-8 .. 9"/>
    </type>
    <description>
      <text>A node using this data type represents a sensor value
precision range.
A node of this type SHOULD be defined together with nodes of
type sensor-value-type and type sensor-value-scale.  Together,
associated nodes of these three types are used to identify the
semantics of a node of type sensor-value.
If a node of this type contains a value in the range 1 to 9,
it represents the number of decimal places in the fractional
part of an associated sensor-value fixed-point number.
If a node of this type contains a value in the range -8 to -1,
it represents the number of accurate digits in the associated
sensor-value fixed-point number.
The value zero indicates the associated sensor-value node is
not a fixed-point number.
Server implementers must choose a value for the associated
sensor-value-precision node so that the precision and accuracy
of the associated sensor-value node is correctly indicated.
For example, a component representing a temperature sensor
that can measure 0 to 100 degrees C in 0.1 degree
increments, +/- 0.05 degrees, would have a
sensor-value-precision value of '1', a sensor-value-scale
value of 'units', and a sensor-value ranging from '0' to
'1000'.  The sensor-value would be interpreted as
'degrees C * 10'.</text>
    </description>
    <reference>
      <text>RFC 3433: Entity Sensor Management Information Base -
          EntitySensorPrecision</text>
    </reference>
  </typedef>
  <typedef name="sensor-value">
    <type name="int32">
      <range value="-1000000000 .. 1000000000"/>
    </type>
    <description>
      <text>A node using this data type represents a sensor value.
A node of this type SHOULD be defined together with nodes of
type sensor-value-type, type sensor-value-scale, and
type sensor-value-precision.  Together, associated nodes of
those three types are used to identify the semantics of a node
of this data type.
The semantics of a node using this data type are determined by
the value of the associated sensor-value-type node.
If the associated sensor-value-type node is equal to 'voltsAC',
'voltsDC', 'amperes', 'watts', 'hertz', 'celsius', or 'cmm',
then a node of this type MUST contain a fixed-point number
ranging from -999,999,999 to +999,999,999.  The value
-1000000000 indicates an underflow error.  The value
+1000000000 indicates an overflow error.  The
sensor-value-precision indicates how many fractional digits
are represented in the associated sensor-value node.
If the associated sensor-value-type node is equal to
'percentRH', then a node of this type MUST contain a number
ranging from 0 to 100.
If the associated sensor-value-type node is equal to 'rpm',
then a node of this type MUST contain a number ranging from
-999,999,999 to +999,999,999.
If the associated sensor-value-type node is equal to
'truth-value', then a node of this type MUST contain either the
value 1 (true) or the value 2 (false).
If the associated sensor-value-type node is equal to 'other' or
'unknown', then a node of this type MUST contain a number
ranging from -1000000000 to 1000000000.</text>
    </description>
    <reference>
      <text>RFC 3433: Entity Sensor Management Information Base -
          EntitySensorValue</text>
    </reference>
  </typedef>
  <typedef name="sensor-status">
    <type name="enumeration">
      <enum name="ok">
        <value value="1"/>
        <description>
          <text>Indicates that the server can obtain the sensor value.</text>
        </description>
      </enum>
      <enum name="unavailable">
        <value value="2"/>
        <description>
          <text>Indicates that the server presently cannot obtain the
sensor value.</text>
        </description>
      </enum>
      <enum name="nonoperational">
        <value value="3"/>
        <description>
          <text>Indicates that the server believes the sensor is broken.
The sensor could have a hard failure (disconnected wire)
or a soft failure such as out-of-range, jittery, or wildly
fluctuating readings.</text>
        </description>
      </enum>
    </type>
    <description>
      <text>A node using this data type represents the operational status
of a physical sensor.</text>
    </description>
    <reference>
      <text>RFC 3433: Entity Sensor Management Information Base -
          EntitySensorStatus</text>
    </reference>
  </typedef>
  <container name="hardware">
    <description>
      <text>Data nodes representing components.
If the server supports configuration of hardware components,
then this data model is instantiated in the configuration
datastores supported by the server.  The leaf-list 'datastore'
for the module 'ietf-hardware' in the YANG library provides
this information.</text>
    </description>
    <leaf name="last-change">
      <type name="yang:date-and-time"/>
      <config value="false"/>
      <description>
        <text>The time the '/hardware/component' list changed in the
operational state.</text>
      </description>
    </leaf>
    <list name="component">
      <key value="name"/>
      <description>
        <text>List of components.
When the server detects a new hardware component, it
initializes a list entry in the operational state.
If the server does not support configuration of hardware
components, list entries in the operational state are
initialized with values for all nodes as detected by the
implementation.
Otherwise, this procedure is followed:
  1. If there is an entry in the '/hardware/component' list
     in the intended configuration with values for the nodes
     'class', 'parent', and 'parent-rel-pos' that are equal
     to the detected values, then the list entry in the
     operational state is initialized with the configured
     values, including the 'name'.
  2. Otherwise (i.e., there is no matching configuration
     entry), the list entry in the operational state is
     initialized with values for all nodes as detected by
     the implementation.
If the '/hardware/component' list in the intended
configuration is modified, then the system MUST behave as if
it re-initializes itself and follow the procedure in (1).</text>
      </description>
      <reference>
        <text>RFC 6933: Entity MIB (Version 4) - entPhysicalEntry</text>
      </reference>
      <leaf name="name">
        <type name="string"/>
        <description>
          <text>The name assigned to this component.
This name is not required to be the same as
entPhysicalName.</text>
        </description>
      </leaf>
      <leaf name="class">
        <type name="identityref">
          <base name="ianahw:hardware-class"/>
        </type>
        <mandatory value="true"/>
        <description>
          <text>An indication of the general hardware type of the
component.</text>
        </description>
        <reference>
          <text>RFC 6933: Entity MIB (Version 4) - entPhysicalClass</text>
        </reference>
      </leaf>
      <leaf name="physical-index">
        <if-feature name="entity-mib"/>
        <type name="int32">
          <range value="1..2147483647"/>
        </type>
        <config value="false"/>
        <description>
          <text>The entPhysicalIndex for the entPhysicalEntry represented
by this list entry.</text>
        </description>
        <reference>
          <text>RFC 6933: Entity MIB (Version 4) - entPhysicalIndex</text>
        </reference>
      </leaf>
      <leaf name="description">
        <type name="string"/>
        <config value="false"/>
        <description>
          <text>A textual description of the component.  This node should
contain a string that identifies the manufacturer's name
for the component and should be set to a distinct value
for each version or model of the component.</text>
        </description>
        <reference>
          <text>RFC 6933: Entity MIB (Version 4) - entPhysicalDescr</text>
        </reference>
      </leaf>
      <leaf name="parent">
        <type name="leafref">
          <path value="../../component/name"/>
          <require-instance value="false"/>
        </type>
        <description>
          <text>The name of the component that physically contains this
component.
If this leaf is not instantiated, it indicates that this
component is not contained in any other component.
In the event that a physical component is contained by
more than one physical component (e.g., double-wide
modules), this node contains the name of one of these
components.  An implementation MUST use the same name
every time this node is instantiated.</text>
        </description>
        <reference>
          <text>RFC 6933: Entity MIB (Version 4) - entPhysicalContainedIn</text>
        </reference>
      </leaf>
      <leaf name="parent-rel-pos">
        <type name="int32">
          <range value="0 .. 2147483647"/>
        </type>
        <description>
          <text>An indication of the relative position of this child
component among all its sibling components.  Sibling
components are defined as components that:
  o share the same value of the 'parent' node and
  o share a common base identity for the 'class' node.
Note that the last rule gives implementations flexibility
in how components are numbered.  For example, some
implementations might have a single number series for all
components derived from 'ianahw:port', while some others
might have different number series for different
components with identities derived from 'ianahw:port' (for
example, one for registered jack 45 (RJ45) and one for
small form-factor pluggable (SFP)).</text>
        </description>
        <reference>
          <text>RFC 6933: Entity MIB (Version 4) -
          entPhysicalParentRelPos</text>
        </reference>
      </leaf>
      <leaf-list name="contains-child">
        <type name="leafref">
          <path value="../../component/name"/>
        </type>
        <config value="false"/>
        <description>
          <text>The name of the contained component.</text>
        </description>
        <reference>
          <text>RFC 6933: Entity MIB (Version 4) - entPhysicalChildIndex</text>
        </reference>
      </leaf-list>
      <leaf name="hardware-rev">
        <type name="string"/>
        <config value="false"/>
        <description>
          <text>The vendor-specific hardware revision string for the
component.  The preferred value is the hardware revision
identifier actually printed on the component itself (if
present).</text>
        </description>
        <reference>
          <text>RFC 6933: Entity MIB (Version 4) -
          entPhysicalHardwareRev</text>
        </reference>
      </leaf>
      <leaf name="firmware-rev">
        <type name="string"/>
        <config value="false"/>
        <description>
          <text>The vendor-specific firmware revision string for the
component.</text>
        </description>
        <reference>
          <text>RFC 6933: Entity MIB (Version 4) -
          entPhysicalFirmwareRev</text>
        </reference>
      </leaf>
      <leaf name="software-rev">
        <type name="string"/>
        <config value="false"/>
        <description>
          <text>The vendor-specific software revision string for the
component.</text>
        </description>
        <reference>
          <text>RFC 6933: Entity MIB (Version 4) -
          entPhysicalSoftwareRev</text>
        </reference>
      </leaf>
      <leaf name="serial-num">
        <type name="string"/>
        <config value="false"/>
        <description>
          <text>The vendor-specific serial number string for the
component.  The preferred value is the serial number
string actually printed on the component itself (if
present).</text>
        </description>
        <reference>
          <text>RFC 6933: Entity MIB (Version 4) - entPhysicalSerialNum</text>
        </reference>
      </leaf>
      <leaf name="mfg-name">
        <type name="string"/>
        <config value="false"/>
        <description>
          <text>The name of the manufacturer of this physical component.
The preferred value is the manufacturer name string
actually printed on the component itself (if present).
Note that comparisons between instances of the
'model-name', 'firmware-rev', 'software-rev', and
'serial-num' nodes are only meaningful amongst components
with the same value of 'mfg-name'.
If the manufacturer name string associated with the
physical component is unknown to the server, then this
node is not instantiated.</text>
        </description>
        <reference>
          <text>RFC 6933: Entity MIB (Version 4) - entPhysicalMfgName</text>
        </reference>
      </leaf>
      <leaf name="model-name">
        <type name="string"/>
        <config value="false"/>
        <description>
          <text>The vendor-specific model name identifier string
associated with this physical component.  The preferred
value is the customer-visible part number, which may be
printed on the component itself.
If the model name string associated with the physical
component is unknown to the server, then this node is not
instantiated.</text>
        </description>
        <reference>
          <text>RFC 6933: Entity MIB (Version 4) - entPhysicalModelName</text>
        </reference>
      </leaf>
      <leaf name="alias">
        <type name="string"/>
        <description>
          <text>An 'alias' name for the component, as specified by a
network manager, that provides a non-volatile 'handle' for
the component.
If no configured value exists, the server MAY set the
value of this node to a locally unique value in the
operational state.
A server implementation MAY map this leaf to the
entPhysicalAlias MIB object.  Such an implementation needs
to use some mechanism to handle the differences in size
and characters allowed between this leaf and
entPhysicalAlias.  The definition of such a mechanism is
outside the scope of this document.</text>
        </description>
        <reference>
          <text>RFC 6933: Entity MIB (Version 4) - entPhysicalAlias</text>
        </reference>
      </leaf>
      <leaf name="asset-id">
        <type name="string"/>
        <description>
          <text>This node is a user-assigned asset tracking identifier for
the component.
A server implementation MAY map this leaf to the
entPhysicalAssetID MIB object.  Such an implementation
needs to use some mechanism to handle the differences in
size and characters allowed between this leaf and
entPhysicalAssetID.  The definition of such a mechanism is
outside the scope of this document.</text>
        </description>
        <reference>
          <text>RFC 6933: Entity MIB (Version 4) - entPhysicalAssetID</text>
        </reference>
      </leaf>
      <leaf name="is-fru">
        <type name="boolean"/>
        <config value="false"/>
        <description>
          <text>This node indicates whether or not this component is
considered a 'field-replaceable unit' by the vendor.  If
this node contains the value 'true', then this component
identifies a field-replaceable unit.  For all components
that are permanently contained within a field-replaceable
unit, the value 'false' should be returned for this
node.</text>
        </description>
        <reference>
          <text>RFC 6933: Entity MIB (Version 4) - entPhysicalIsFRU</text>
        </reference>
      </leaf>
      <leaf name="mfg-date">
        <type name="yang:date-and-time"/>
        <config value="false"/>
        <description>
          <text>The date of manufacturing of the managed component.</text>
        </description>
        <reference>
          <text>RFC 6933: Entity MIB (Version 4) - entPhysicalMfgDate</text>
        </reference>
      </leaf>
      <leaf-list name="uri">
        <type name="inet:uri"/>
        <description>
          <text>This node contains identification information about the
component.</text>
        </description>
        <reference>
          <text>RFC 6933: Entity MIB (Version 4) - entPhysicalUris</text>
        </reference>
      </leaf-list>
      <leaf name="uuid">
        <type name="yang:uuid"/>
        <config value="false"/>
        <description>
          <text>A Universally Unique Identifier of the component.</text>
        </description>
        <reference>
          <text>RFC 6933: Entity MIB (Version 4) - entPhysicalUUID</text>
        </reference>
      </leaf>
      <container name="state">
        <if-feature name="hardware-state"/>
        <description>
          <text>State-related nodes</text>
        </description>
        <reference>
          <text>RFC 4268: Entity State MIB</text>
        </reference>
        <leaf name="state-last-changed">
          <type name="yang:date-and-time"/>
          <config value="false"/>
          <description>
            <text>The date and time when the value of any of the
admin-state, oper-state, usage-state, alarm-state, or
standby-state changed for this component.
If there has been no change since the last
re-initialization of the local system, this node
contains the date and time of local system
initialization.  If there has been no change since the
component was added to the local system, this node
contains the date and time of the insertion.</text>
          </description>
          <reference>
            <text>RFC 4268: Entity State MIB - entStateLastChanged</text>
          </reference>
        </leaf>
        <leaf name="admin-state">
          <type name="admin-state"/>
          <description>
            <text>The administrative state for this component.
This node refers to a component's administrative
permission to service both other components within its
containment hierarchy as well other users of its
services defined by means outside the scope of this
module.
Some components exhibit only a subset of the remaining
administrative state values.  Some components cannot be
locked; hence, this node exhibits only the 'unlocked'
state.  Other components cannot be shut down gracefully;
hence, this node does not exhibit the 'shutting-down'
state.</text>
          </description>
          <reference>
            <text>RFC 4268: Entity State MIB - entStateAdmin</text>
          </reference>
        </leaf>
        <leaf name="oper-state">
          <type name="oper-state"/>
          <config value="false"/>
          <description>
            <text>The operational state for this component.
Note that this node does not follow the administrative
state.  An administrative state of 'down' does not
predict an operational state of 'disabled'.
Note that some implementations may not be able to
accurately report oper-state while the admin-state node
has a value other than 'unlocked'.  In these cases, this
node MUST have a value of 'unknown'.</text>
          </description>
          <reference>
            <text>RFC 4268: Entity State MIB - entStateOper</text>
          </reference>
        </leaf>
        <leaf name="usage-state">
          <type name="usage-state"/>
          <config value="false"/>
          <description>
            <text>The usage state for this component.
This node refers to a component's ability to service
more components in a containment hierarchy.
Some components will exhibit only a subset of the usage
state values.  Components that are unable to ever
service any components within a containment hierarchy
will always have a usage state of 'busy'.  In some
cases, a component will be able to support only one
other component within its containment hierarchy and
will therefore only exhibit values of 'idle' and
'busy'.</text>
          </description>
          <reference>
            <text>RFC 4268: Entity State MIB - entStateUsage</text>
          </reference>
        </leaf>
        <leaf name="alarm-state">
          <type name="alarm-state"/>
          <config value="false"/>
          <description>
            <text>The alarm state for this component.  It does not
include the alarms raised on child components within its
containment hierarchy.</text>
          </description>
          <reference>
            <text>RFC 4268: Entity State MIB - entStateAlarm</text>
          </reference>
        </leaf>
        <leaf name="standby-state">
          <type name="standby-state"/>
          <config value="false"/>
          <description>
            <text>The standby state for this component.
Some components will exhibit only a subset of the
remaining standby state values.  If this component
cannot operate in a standby role, the value of this node
will always be 'providing-service'.</text>
          </description>
          <reference>
            <text>RFC 4268: Entity State MIB - entStateStandby</text>
          </reference>
        </leaf>
      </container>
      <container name="sensor-data">
        <when condition='derived-from-or-self(../class,&#10;                                 "ianahw:sensor")'>
          <description>
            <text>Sensor data nodes present for any component of type
'sensor'</text>
          </description>
        </when>
        <if-feature name="hardware-sensor"/>
        <config value="false"/>
        <description>
          <text>Sensor-related nodes.</text>
        </description>
        <reference>
          <text>RFC 3433: Entity Sensor Management Information Base</text>
        </reference>
        <leaf name="value">
          <type name="sensor-value"/>
          <description>
            <text>The most recent measurement obtained by the server
for this sensor.
A client that periodically fetches this node should also
fetch the nodes 'value-type', 'value-scale', and
'value-precision', since they may change when the value
is changed.</text>
          </description>
          <reference>
            <text>RFC 3433: Entity Sensor Management Information Base -
          entPhySensorValue</text>
          </reference>
        </leaf>
        <leaf name="value-type">
          <type name="sensor-value-type"/>
          <description>
            <text>The type of data units associated with the
sensor value</text>
          </description>
          <reference>
            <text>RFC 3433: Entity Sensor Management Information Base -
          entPhySensorType</text>
          </reference>
        </leaf>
        <leaf name="value-scale">
          <type name="sensor-value-scale"/>
          <description>
            <text>The (power of 10) scaling factor associated
with the sensor value</text>
          </description>
          <reference>
            <text>RFC 3433: Entity Sensor Management Information Base -
          entPhySensorScale</text>
          </reference>
        </leaf>
        <leaf name="value-precision">
          <type name="sensor-value-precision"/>
          <description>
            <text>The number of decimal places of precision
associated with the sensor value</text>
          </description>
          <reference>
            <text>RFC 3433: Entity Sensor Management Information Base -
          entPhySensorPrecision</text>
          </reference>
        </leaf>
        <leaf name="oper-status">
          <type name="sensor-status"/>
          <description>
            <text>The operational status of the sensor.</text>
          </description>
          <reference>
            <text>RFC 3433: Entity Sensor Management Information Base -
          entPhySensorOperStatus</text>
          </reference>
        </leaf>
        <leaf name="units-display">
          <type name="string"/>
          <description>
            <text>A textual description of the data units that should be
used in the display of the sensor value.</text>
          </description>
          <reference>
            <text>RFC 3433: Entity Sensor Management Information Base -
          entPhySensorUnitsDisplay</text>
          </reference>
        </leaf>
        <leaf name="value-timestamp">
          <type name="yang:date-and-time"/>
          <description>
            <text>The time the status and/or value of this sensor was last
obtained by the server.</text>
          </description>
          <reference>
            <text>RFC 3433: Entity Sensor Management Information Base -
          entPhySensorValueTimeStamp</text>
          </reference>
        </leaf>
        <leaf name="value-update-rate">
          <type name="uint32"/>
          <units name="milliseconds"/>
          <description>
            <text>An indication of the frequency that the server updates
the associated 'value' node, represented in
milliseconds.  The value zero indicates:
 - the sensor value is updated on demand (e.g.,
   when polled by the server for a get-request),
 - the sensor value is updated when the sensor
   value changes (event-driven), or
 - the server does not know the update rate.</text>
          </description>
          <reference>
            <text>RFC 3433: Entity Sensor Management Information Base -
          entPhySensorValueUpdateRate</text>
          </reference>
        </leaf>
      </container>
    </list>
  </container>
  <notification name="hardware-state-change">
    <description>
      <text>A hardware-state-change notification is generated when the
value of /hardware/last-change changes in the operational
state.</text>
    </description>
    <reference>
      <text>RFC 6933: Entity MIB (Version 4) - entConfigChange</text>
    </reference>
  </notification>
  <notification name="hardware-state-oper-enabled">
    <if-feature name="hardware-state"/>
    <description>
      <text>A hardware-state-oper-enabled notification signifies that a
component has transitioned into the 'enabled' state.</text>
    </description>
    <leaf name="name">
      <type name="leafref">
        <path value="/hardware/component/name"/>
      </type>
      <description>
        <text>The name of the component that has transitioned into the
'enabled' state.</text>
      </description>
    </leaf>
    <leaf name="admin-state">
      <type name="leafref">
        <path value="/hardware/component/state/admin-state"/>
      </type>
      <description>
        <text>The administrative state for the component.</text>
      </description>
    </leaf>
    <leaf name="alarm-state">
      <type name="leafref">
        <path value="/hardware/component/state/alarm-state"/>
      </type>
      <description>
        <text>The alarm state for the component.</text>
      </description>
    </leaf>
    <reference>
      <text>RFC 4268: Entity State MIB - entStateOperEnabled</text>
    </reference>
  </notification>
  <notification name="hardware-state-oper-disabled">
    <if-feature name="hardware-state"/>
    <description>
      <text>A hardware-state-oper-disabled notification signifies that a
component has transitioned into the 'disabled' state.</text>
    </description>
    <leaf name="name">
      <type name="leafref">
        <path value="/hardware/component/name"/>
      </type>
      <description>
        <text>The name of the component that has transitioned into the
'disabled' state.</text>
      </description>
    </leaf>
    <leaf name="admin-state">
      <type name="leafref">
        <path value="/hardware/component/state/admin-state"/>
      </type>
      <description>
        <text>The administrative state for the component.</text>
      </description>
    </leaf>
    <leaf name="alarm-state">
      <type name="leafref">
        <path value="/hardware/component/state/alarm-state"/>
      </type>
      <description>
        <text>The alarm state for the component.</text>
      </description>
    </leaf>
    <reference>
      <text>RFC 4268: Entity State MIB - entStateOperDisabled</text>
    </reference>
  </notification>
</module>
